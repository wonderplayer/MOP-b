ARM GAS  md2.s 			page 1


   1              		.text
   2              		.align	2
   3              		.global matmul
   4              		.type matmul, %function
   5              	matmul:
   6 0000 0F002DE9 		stmfd sp!, {r0-r3}
   7              		@ sp = h1
   8              		@ sp + 4 = w1
   9              		@ sp + 8 = m1
  10              		@ sp + 12 = h2
  11              		@ sp + 16 = w2
  12              		@ sp + 20 = m2
  13              		@ sp + 24 = m3
  14 0004 0040A0E3 		mov r4, #0
  15 0008 1C408DE5 		str r4, [sp, #28] @ i = 0
  16 000c 20408DE5 		str r4, [sp, #32] @ j = 0
  17 0010 24408DE5 		str r4, [sp, #36] @ k = 0
  18 0014 050000EA 		b test_1
  19              	loop_1:
  20 0018 0010A0E3 		mov r1, #0
  21 001c 20108DE5 		str r1, [sp, #32]
  22 0020 150000EA 		b test_2				@ Parraksta lr registru, bet kad iet atpakal ar bx lr, neparraksta
  23              							@ uz ieprieksejo vertibu. Vajag pirms iet ieksta glabat lr vai ari
  24              							@ neiet tik dzili ar bl. Izveidot vairakas iezimes un lekt pa tam
  25 0024 1C009DE5 	a_t2:	ldr r0, [sp, #28]
  26 0028 010080E2 		add r0, r0, #1 @ Increment i
  27 002c 1C008DE5 		str r0, [sp, #28]
  28              	test_1:
  29 0030 1C009DE5 		ldr r0, [sp, #28]
  30 0034 00109DE5 		ldr r1, [sp]
  31 0038 010050E1 		cmp r0, r1
  32 003c F5FFFFBA 		blt loop_1
  33 0040 1C0000EA 		b end
  34              	
  35              	loop_2:
  36 0044 0010A0E3 		mov r1, #0
  37 0048 24108DE5 		str r1, [sp, #36]
  38 004c 140000EA 		b test_3
  39              	
  40              		@ m3[i][j] = sum
  41 0050 28009DE5 	a_t3:	ldr r0, [sp, #40] @ Get sum
  42 0054 00109DE5 		ldr r1, [sp] @ Get h1
  43 0058 1C209DE5 		ldr r2, [sp, #28] @ Get i
  44 005c 20309DE5 		ldr r3, [sp, #32] @ Get j
  45              		@ r4 = Offset for array m3
  46 0060 910204E0 		mul r4, r1, r2 @ r4 = h1 * i
  47 0064 034084E0 		add r4, r4, r3 @ r4 = r4 + j
  48 0068 18509DE5 		ldr r5, [sp, #24]
  49 006c 040185E7 		str r0, [r5, r4, LSL #2]
  50              	
  51 0070 20009DE5 		ldr r0, [sp, #32]
  52 0074 010080E2 		add r0, r0, #1 @ Increment j
  53 0078 20008DE5 		str r0, [sp, #32]
  54              	test_2:
  55 007c 20009DE5 		ldr r0, [sp, #32]
  56 0080 10109DE5 		ldr r1, [sp, #16]
  57 0084 010050E1 		cmp r0, r1
ARM GAS  md2.s 			page 2


  58 0088 EDFFFFBA 		blt loop_2
  59 008c E4FFFFEA 		b a_t2
  60              	
  61              	
  62              	loop_3:
  63 0090 0200A0E3 		mov r0, #2
  64 0094 28008DE5 		str r0, [sp, #40] @ Here the real sum count must be
  65 0098 24009DE5 		ldr r0, [sp, #36]
  66 009c 010080E2 		add r0, r0, #1	@ Increment k
  67 00a0 24008DE5 		str r0, [sp, #36]
  68              	test_3:
  69 00a4 24009DE5 		ldr r0, [sp, #36]
  70 00a8 04109DE5 		ldr r1, [sp, #4]
  71 00ac 010050E1 		cmp r0, r1
  72 00b0 F6FFFFBA 		blt loop_3
  73 00b4 E5FFFFEA 		b a_t3
  74              	
  75              	end:
  76 00b8 0F009DE8 		ldmfd sp, {r0-r3}
  77 00bc 1EFF2FE1 		bx lr
